* Supply a config.ini to enable OpenMP and MPI for AMBiT.
* Patch SConstruct to take the Easybuild compiler and compiler flag
  settings. Also get rid of a superfluous -O3 flag, and add spaces
  to fix the Append actions.
* Patch SConstruct for Python 3 by changing ConfigParser into configparser.

  2021-01-26 Fokke Dijkstra, University of Groninggen, NL
diff -ru --new-file AMBiT-3.0.4.org/config.ini AMBiT-3.0.4/config.ini
--- AMBiT-3.0.4.org/config.ini	1970-01-01 01:00:00.000000000 +0100
+++ AMBiT-3.0.4/config.ini	2021-01-26 13:35:08.433284472 +0100
@@ -0,0 +1,40 @@
+; Build configuration options for AMBiT:
+; 
+; Most options in this file are safe to leave blank unless otherwise specified -
+; the build system will attempt to automatically infer values for blank options
+[Compiler options]
+CXX = 
+CXXFLAGS =  
+F77 = 
+LINK = 
+LINKFLAGS = -fopenmp
+
+[HPC options]
+; OpenMP compiler options can be automatically inferred (unless using MPI)
+Use OpenMP = yes
+; NOTE: The compiler options required to use MPI and MKL are strongly platform 
+; dependent and cannot be automatically inferred. All MPI and OpenMP compilers, 
+; flags and Include paths must be explicitly specified if running with MPI 
+; and/or MKL
+Use MPI = yes
+Use MKL = no
+MKL flags = 
+
+[AMBiT options]
+AMBiT path = 
+Angular data =
+
+[Dependency paths]
+Lib path = 
+Include path = 
+Eigen path =
+Sparsehash path = 
+gtest lib path = 
+gtest header path = 
+
+[Dependencies]
+; These libraries will be linked with -l<lib> flags by the linker
+Libs = gsl, 
+       openblas, 
+       boost_system, 
+       boost_filesystem
diff -ru --new-file AMBiT-3.0.4.org/SConstruct AMBiT-3.0.4/SConstruct
--- AMBiT-3.0.4.org/SConstruct	2019-03-05 06:21:55.000000000 +0100
+++ AMBiT-3.0.4/SConstruct	2021-01-26 13:41:00.479458329 +0100
@@ -2,7 +2,7 @@
 import os # Required to get the current working dir
 import shutil # Required for copying files
 import re
-import ConfigParser
+import configparser
 
 def get_build_target(src, build):
     # Constructs the path to the build object for some C++ source file, e.g.: 
@@ -122,8 +122,8 @@
     """ Configures the supplied compilation environment according to the configuration options in conf.
     
         env - Pre-existing compilation environment, which should already have been initialised
-        conf - ConfigParser object generated by parsing the build configuration file (config.ini)
-        ambit_conf - ConfigParser object generated by parsing the dependencies configuration 
+        conf - configparser object generated by parsing the build configuration file (config.ini)
+        ambit_conf - configparser object generated by parsing the dependencies configuration 
                      file (ambit_dependencies.ini) 
     """
 
@@ -139,17 +139,17 @@
     try:
         gtest_libs_dir = conf.get("Dependency paths","gtest lib path")
         gtest_header_dir = conf.get("Dependency paths","gtest header path")
-    except ConfigParser.NoOptionError:
+    except configparser.NoOptionError:
         gtest_libs_dir = '' # gtest functionality can be safely left out in release builds
         gtest_header_dir = ''
     try:
         eigen_dir = conf.get("Dependency paths", "Eigen path")
-    except ConfigParser.NoOptionError:
+    except configparser.NoOptionError:
         eigen_dir = ''
 
     try:
         sparsehash_dir = conf.get("Dependency paths", "Sparsehash path")
-    except ConfigParser.NoOptionError:
+    except configparser.NoOptionError:
         sparsehash_dir = ''
     
     # Make sure to expand any environment variables in the paths
@@ -161,7 +161,7 @@
     if not angular_data_dir:
         angular_data_dir = ambit_dir + "/AngularData"
         print("Angular data directory not specified. Defaulting to {}".format(ambit_dir))
-    env.Append(CXXFLAGS = '-DANGULAR_DATA_DIRECTORY={}'.format(angular_data_dir))
+    env.Append(CXXFLAGS = ' -DANGULAR_DATA_DIRECTORY={}'.format(angular_data_dir))
 
     header_path = [ambit_dir, eigen_dir, sparsehash_dir, custom_include, gtest_header_dir]
 
@@ -175,13 +175,13 @@
     try:
         custom_cxx_flags = conf.get("Compiler options", "CXXFLAGS")
         env.Append(CXXFLAGS = custom_cxx_flags)
-    except ConfigParser.NoOptionError:
+    except configparser.NoOptionError:
         pass
     # Link flags
     try:
         custom_linkflags = conf.get("Compiler options", "LINKFLAGS")
         env.Append(LINKFLAGS=custom_linkflags)
-    except ConfigParser.NoOptionError:
+    except configparser.NoOptionError:
         pass
 
 
@@ -190,7 +190,7 @@
         custom_cxx = conf.get("Compiler options", "CXX")
         if custom_cxx:
             env.Replace(CXX = custom_cxx)
-    except ConfigParser.NoOptionError:
+    except configparser.NoOptionError:
         pass
 
     try: 
@@ -199,7 +199,7 @@
             env.Replace(LINK = link)
         else:
             env.Replace(LINK = env["CXX"]) # Try to fallback to the requested C++ compiler, if possible
-    except ConfigParser.NoOptionError:
+    except configparser.NoOptionError:
         env.Replace(LINK = env["CXX"]) 
 
     # Do the same for the Fortran compiler
@@ -207,7 +207,7 @@
         custom_F77 = conf.get("Compiler options", "F77")
         if custom_F77:
             env.Replace(FORTRAN = custom_F77)
-    except ConfigParser.NoOptionError:
+    except configparser.NoOptionError:
         pass
 
     # Final step before configuring: check if either OpenMP or MPI have been requested
@@ -246,7 +246,7 @@
                 print("Error: MKL flags must be explicitly defined in config.ini to use MKL")
                 exit(-1)
 
-        except ConfigParser.NoOptionError:
+        except configparser.NoOptionError:
             print("Error: MKL flags must be explicitly defined in config.ini to use MKL")
             exit(-1)
 
@@ -256,8 +256,8 @@
     """ Runs autoconf-like checks to ensure that the compilation environment is properly configured.
 
         env - Pre-existing compilation environment, which should already have been initialised
-        conf - ConfigParser object generated by parsing the build configuration file (config.ini)
-        ambit_conf - ConfigParser object generated by parsing the dependencies configuration 
+        conf - configparser object generated by parsing the build configuration file (config.ini)
+        ambit_conf - configparser object generated by parsing the dependencies configuration 
                      file (ambit_modules.ini) 
     """
 
@@ -323,7 +323,7 @@
             else:
                 print("Failed to automatically locate Sparsehash headers. Specify Sparsehash path in config.ini")
                 exit(-1)
-    except ConfigParser.NoOptionError:
+    except configparser.NoOptionError:
         print("Sparsehash directory not specified...")
         if env_conf.check_pkg("libsparsehash"):
             env_conf.env.ParseConfig("pkg-config --libs --cflags libsparsehash")
@@ -340,7 +340,7 @@
             else:
                 print("Failed to automatically locate Eigen headers. Specify Eigen path in config.ini")
                 exit(-1)
-    except ConfigParser.NoOptionError:
+    except configparser.NoOptionError:
         print("Eigen directory not specified...")
         if env_conf.check_pkg("eigen3"):
             env_conf.env.ParseConfig("pkg-config --libs --cflags eigen3")
@@ -362,9 +362,12 @@
 
 # First, grab the type of build from the command line and set up the compiler environment (default is gcc)
 # NOTE: We need to explicitly import the shell (bash) from the environment so compiler checks work
-env = Environment(CXX = 'g++', CC = 'gcc', LINK = 'g++', \
-    FORTRAN = 'gfortran', \
-    F77FLAGS = '-O2',
+env = Environment(CXX = os.environ['CXX'], \
+    CC = os.environ['CC'], \
+    CXXFLAGS = os.environ['CXXFLAGS'], \
+    LINK = os.environ['CXX'], \
+    FORTRAN = os.environ['F77'], \
+    F77FLAGS = os.environ['FFLAGS'], \
     SHELL = "/bin/bash",
     ENV = os.environ)
 
@@ -372,23 +375,23 @@
 
 if 'debug' in COMMAND_LINE_TARGETS:
     build = "Debug"
-    env.Append(CXXFLAGS = '-std=c++11 -g -Wno-deprecated-register -Wno-unused-result -O0')
+    env.Append(CXXFLAGS = ' -std=c++11 -g -Wno-deprecated-register -Wno-unused-result -O0')
 elif 'test' in COMMAND_LINE_TARGETS:
     build = "Test"
-    env.Append(CXXFLAGS = '-std=c++11')
+    env.Append(CXXFLAGS = ' -std=c++11')
     env.AppendUnique(LIBS = ['gtest', 'pthread'])
 else:
-    env.Append(CXXFLAGS = '-std=c++11 -O3')
+    env.Append(CXXFLAGS = ' -std=c++11')
 
 # Now open the ini files containing the user config options, and the AMBiT requirements
-conf = ConfigParser.SafeConfigParser(allow_no_value = True)
+conf = configparser.SafeConfigParser(allow_no_value = True)
 conf.optionxform = str # Necessary to make keys case-sensitive
 if not conf.read("config.ini"):
     print("Warning: configuration file config.ini not found. Copying configuration template ...")
     shutil.copy2("config_template.ini", "config.ini")
     conf.read("config.ini")
 
-ambit_conf = ConfigParser.SafeConfigParser(allow_no_value = True)
+ambit_conf = configparser.SafeConfigParser(allow_no_value = True)
 ambit_conf.optionxform = str # Necessary to make keys case-sensitive
 # Bail out if we can't read config.ini
 if not ambit_conf.read("ambit_modules.ini"):
